% top-level definitions go into systemdict
% NOTE: cannot use <<>> format for dicts, use `n dict def`, `begin`, `end`.
% NOTE: interpreter is languagelevel 1 at load time.
% HINT: test changes using `/usr/bin/gs -dNOSAFER -dNODISPLAY`,
% `(Resource/Init/casperscript.ps) run`
% `casper`
% `0.0 cvbool =`
% for example, before `make all install`
% NOTE: for this to work, don't do anything in this file that *presupposes*
% any casperscript extensions.
/#! {{currentfile 128 string readline exch pop {exit} if} loop} bind def
/# /#! load def  % also enable # comments
/.silent -112 def  % gs_error_silent in base/gserrors.h
% PLRM recommends only allocating enough for immediate needs with `dict`
% it will grow as needed (languagelevels 2+)
/forthdict 16 dict def
forthdict begin
  % add some helpful words from FORTH, starting with `words`
  /dictwords {  % dict -
    % print to stdout all the words (keys) in the dictionary
    {pop cvx ==only ( ) =only} forall () =
  } bind def
  /words {  % -
    % print to stdout all words from all dictionaries, like FORTH
    countdictstack array dictstack {dictwords} forall
  } bind def
  /bye /quit load def  % alias Forth 'bye' to ps 'quit'
  /see {  % *not* prefix like Forth; use as `/someword see`
    {mark exch load dup mark exch ===} stopped {cleartomark ==} {pop} ifelse
    cleartomark  % necessary in case `load` was unrecognized
  } bind def
end  % forthdict

/casperdict 64 dict def
casperdict begin
  % add some generally useful words without polluting systemdict
  /docstring {  % name string - name
    % intended to be used just after /name and before function definition
    docstrings 2 index  % name string dict name
    3 -1 roll put  % bring string to TOS and store in docstrings
  } bind def
  /topdown {  % -
    % changes behavior of interpreter to allow topdown design
    % instead of causing /undefined errors, lets you run program at every
    % phase of development, showing a placeholder for undefined words.
    % NEW as of 2023-08-16: parses dot-notation names to allow for syntax
    % like `os.path.split`
    % the following uppercase constants should maybe be placed outside
    % this definition once tested
    errordict /.undefined known
      {(topdown already initialized) =}
      {
        /MAX_DOT_DEPTH 3 def
        /MAX_CASPER_NAME_LENGTH 32 def
        /MAX_IMPORT_NAME_LENGTH MAX_DOT_DEPTH dup MAX_CASPER_NAME_LENGTH *
         1 - + def  % 32 times 3, plus 2 dots
        errordict /.undefined errordict /undefined get put
        errordict begin
          /undefined {
            dup type /nametype eq exch dup xcheck 3 -1 roll and
              {(\(/) print =only ( not yet defined\)) =}
              {pop /.undefined signalerror}
            ifelse
          } bind def
        end
      }
      ifelse
  } bind def
  /alias (  /currentname /newname -
    alias currentname to newname) docstring {
    exch load def
  } bind def
  /=stack (  -
    one-line version of pstack) docstring {
    count array astore dup == aload pop
  } bind def
  /strlen {  % anystring - strlen  % length to first null (\000)
    % if no nulls, entire length of string (same as `length`)
    (\000) search {3 1 roll pop pop length} {length} ifelse
  } bind def
  /append {  % stringbuffer string - combined
    % add (concatenate) string to buffer without shortening buffer
    % (a\000\000) (b) append -> (ab\000)
    1 index dup strlen  % offset to first empty place in buffer
    % stack now: buffer string buffer offset
    3 2 roll putinterval
  } bind def
  /inc {  % name -
    % increments variable, e.g. `/a 1 def /a inc a =` shows `2`
    dup cvx exec 1 add def
  } bind def
  /zero {  % name -
    0 def
  } bind def
  /strtruncate {  % stringbuffer - string
    % remove trailing nulls at end of stringbuffer
    0 1 index strlen getinterval
  } bind def
  /stradd {  % string1 string2 - combined
    % add (concatenate) two strings: (a) (b) stradd -> (ab)
    2 copy strlen exch strlen add string  % make new empty string
    3 2 roll append exch append
  } bind def
  /strmul {  % string multiplier - string
    % multiply a string as does Python: (a) 5 strmul -> (aaaaa)
    1 index strlen 1 index mul string  % string multiplier buffer
    exch {1 index append} repeat
    exch pop
  } bind def
  /add {  % redefine add to include stradd
    {add} stopped {stradd} if
  } bind def
  /mul {  % redefine mul to include strmul
    {mul} stopped {strmul} if
  } bind def
  /truncate {  % redefine truncate to include strtruncate
    {truncate} stopped {strtruncate} if
  } bind def
  /strcopy {  % string - copyofstring
    % true copy as opposed to a reference
    dup length string copy
  } bind def
  /add /+ alias  % allow use of `+` for `add`
  /sub /- alias  % allow use of `-` for `sub`
  /mul /* alias  % allow use of `*` for `mul`
  % cannot use `/` for `div`, nor `//` for `idiv`, until we hijack the parser
  % for the same reason we cannot use `%` for `mod`
  /reversed {  % for strings and arrays
    % we make sure to make a copy with strcopy so as not to mess with
    % the original; we were reversing argv[0] previously!
    strcopy reverse
  } bind def
  /reverse {  % see comments for `reversed`
    % this is an *in-place* reverse, like Python!
    % however, it leaves a copy on the stack.
    dup length 1 - dup 1 + 2 idiv 1 - 0 1 3 -1 roll {  % array length-1 control
      % e.g. abcxyz 5 0
      %(pstack at start of `for` loop, e.g. abcxyz 5 0:) = pstack
      3 copy 3 copy - get 4 1 roll  % abcxyz 5 0 z abcxyz 5 0
      %(pstack after first get, e.g. abcxyz 5 0 z abcxyz 5 0:) = pstack
      exch pop get  % abcxyz 5 0 z a
      %(should be e.g. abcxyz 5 0 z a:) = pstack
      3 index 3 index - exch 5 index 3 1 roll put
      %(should be e.g. abcxya 5 0 z:) = pstack
      3 index 3 1 roll put  % zbcxya 5
      %(should be e.g. zbcxya 5:) = pstack
    } for pop  % drop length-1
  } bind def
  /cvbool {  % something - boolean
    % convert anything (well, some things) to boolean
    /booldict 3 dict def
    booldict begin
      /nulltype {pop false} def
      /integertype {0 ne} def
      /realtype {0 ne} def
    end  % booldict
    dup type dup booldict exch known
      {booldict exch get exec}
      {pop length 0 ne}
      ifelse
  } bind def
  /pagewidth {currentpagedevice /PageSize get 0 get} bind def
  /pageheight {currentpagedevice /PageSize get 1 get} bind def
  /pagesize {  % - pagewidth pageheight
    % get current page size
    % NOTE: original casperscript got this backwards!
    currentpagedevice /PageSize get dup 0 get exch 1 get
  } bind def
  /.import {  % /dictname -
    % unconditionally import dict
    /dottedname 1 index 64 string cvs (.) + def  % dotted name of imported dict
    /filename dottedname (cs) + def  % we look for file with .cs extension
    dup 5 dict def load
    begin filename runlibfile end  % loads file into dict of same name
  } bind def
  /import {  % /dictname reimport -
    % import the dict
    % does nothing if dict already present in currentdict and reimport is false
    % gives error if dictname present but not a dict
    currentdict 2 index known  % stack: /dictname reimport known
      {  % already in dict, so make sure correct type
        1 index load type /dicttype eq
          {{(reimporting) = .import} {=only ( already imported) =} ifelse}
          {1 index dup =only ( already exists and is not a dict) =
           /typecheck signalerror}
          ifelse
      }
      {pop .import}  % not already in dict
    ifelse
  } bind def

  %(languagelevel: ) print /languagelevel where {pop languagelevel} {1} ifelse =
  %(version: ) print version =
  /os 16 dict def
  os begin  % os attributes for GNU/Linux assumed
    /path null def  % fill in later with posixpath
    /name (posix) def
    /curdir (.) def
    /pardir (..) def
    /sep (/) def
    /extsep (.) def
    /altsep (null) def
    /pathsep (:) def
    /linesep (\n) def
    /devnull (/dev/null) def
  end  % os
  /posixpath 16 dict def
  posixpath begin
    % path functions expected to work on posix (and URL paths)
    /split {  % pathspec - dirspec namespec; e.g. /path/to/xyz.ps
      reversed os /sep get search  % ot/htap/ / sp.zyx
        {exch pop reversed exch reversed exch}
        {reversed () exch}
      ifelse
      %(pstack after posixpath.split:) = pstack
    } bind def
    /splitext {  % pathspec.ext - pathspec .ext
      % NOTE that this won't work with, e.g. /path/to.some/filewithnoext,
      % it will return /path/to .some/filewithnoext
      % so, one should always `split` before `splitext`
      reversed os /extsep get search  % zyx/ot/htap/ . sp
        {reversed + exch reversed exch}  % /path/to/xyz .ps
        {reversed ()}  % pathwithnoext ''
      ifelse
      %(pstack after posixpath.splitext:) = pstack
    } bind def
  end  % posixpath
  os /path posixpath put
  % NOTE: remember that only a minimal `sys.argv` is defined at this point,
  % created by `casper`, % run at processing of `-C`.
  % A script is run only after processing `--`, and that is where the full
  % `sys.argv` is defined.
  /scriptname {
    sys.argv 0 get os /path get dup /split get 3 -1 roll exch exec
    %(scriptname after split:) = pstack
    %(sys.argv after split:) = sys.argv ==
    exch pop exch /splitext get exec
    %(scriptname after splitext:) = pstack
    %(sys.argv after splitext:) sys.argv ==
    pop
    %(pstack after scriptname:) = pstack
  } bind def
end  % casperdict

/casper {  % -
  % initialize for programming with casper extensions
  % first copy above dictionaries into userdict
  forthdict userdict copy casperdict exch copy pop
  % put a minimal `sys.argv` into userdict in case a script is not being run
  userdict /sys.argv [argv0] put
  userdict /sys.argc 1 put
  % now enable top-down programming method
  topdown
} bind def
% vim: tabstop=8 shiftwidth=2 expandtab softtabstop=2
